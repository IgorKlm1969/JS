1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2 - к перменной а применяется префиксный инкремент, выражение возвращает значение переменной после её инкрементирования, т.е. 2

d = b++; alert(d);           // 1 - к перменной b применяется постфиксный инкремент, выражение возвращает значение переменной до её инкрементирования, т.е. 1, но при последующем обращении к переменной будет значение 2

c = (2+ ++a); alert(c);      // 5 - после предыдущего инкрементирования значение переменной а = 2, после выражения ++a, a = 3. т.е. 2 + (2+1) = 5

d = (2+ b++); alert(d);      // 4 - после предыдущего инкрементирования значение переменной b = 2, используется постфиксный инкремент, т.е. 2 + 2 = 4. в следующий раз b = 3

alert(a);                    // 3 начальное значение переменной равно 1, она инкрементирована 2 раза, 1 + 1 + 1 = 3

alert(b);                    // 3 начальное значение переменной равно 1, она инкрементирована 2 раза, 1 + 1 + 1 = 3
Почему код даёт именно такие результаты?


2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);

x = 5 // Выражение a *= 2 развернуто пишется так: a = a * 2, т.е. 4. 
Получаем x = 1 + 2 * 2  = 5


7. *Сравнить null и 0. Попробуйте объяснить результат.

null == 0   // false
null === 0  // false
0 - это число, вполне конкретное и определённоe, относящееся к числовому типу данных. 
А null - это пустое значение и отдельный тип данных. 
Никакое значение не может быть равно пустому значению, поэтому сравнения с null всегда возвращают false.
null всегда является одним и тем же фиксированным объектом в памяти, поэтому null == null // true